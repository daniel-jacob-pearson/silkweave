#!/usr/bin/env ruby

require 'rubygems'
require 'stitch'
require 'optparse'

module Stitch::StaticGenerator
  class << self
    attr_accessor :site_root, :output_filename, :overwrite, :skip_existing,
      :server_name, :server_port, :url_scheme
  end

  # Defaults for options
  self.site_root = Dir.pwd
  self.output_filename = 'index.html'
  self.overwrite = false
  self.skip_existing = false
  self.server_name = 'localhost'
  self.server_port = '80'
  self.url_scheme = 'http'

  def self.run!
    OptionParser.new do |opts|
      opts.on('-r', '--root DIRECTORY',
              "Use DIRECTORY as the site's root (default: current directory).") do |dir|
        self.site_root = Pathname.new(Dir.pwd) + dir
      end
      opts.on('-o', '--output FILENAME',
              "Write each generated page to the file named FILENAME (default: index.html).") do |fname|
        self.output_filename = fname
      end
      opts.on('-f', '--[no-]force-ovewrite',
              "Overwrite even if a file with that name already exists (default: false).") do |force|
        self.overwrite = force
      end
      opts.on('-k', '--[no-]skip-existing', 
              "Skip generation of a file if it already exists (default: false).",
              "This takes precedence over --force-overwrite.") do |skip| 
        self.skip_existing = skip
      end
      opts.on('-s', '--server HOSTNAME',
              "Use HOSTNAME as the domain name of the site (default: localhost).") do |hostname|
        self.server_name = hostname
      end
      opts.on('-p', '--port PORT', 
              "Use PORT as the TCP port number used to access the site (default: 80).") do |port|
        self.server_port = port
      end
      opts.on('-u', '--url-scheme SCHEME', 
              "Use SCHEME as the protocol component of URLs used to access the site (default: http).") do |scheme|
        self.url_scheme = scheme
      end
    end.parse!

    env = { # initialize the rack environment
      'REQUEST_METHOD' => 'GET',
      'SCRIPT_NAME' => '',
      'QUERY_STRING' => '',
      'SERVER_NAME' => server_name,
      'SERVER_PORT' => server_port,
      'rack.version' => [1,1],
      'rack.url_scheme' => url_scheme,
      'rack.input' => StringIO.new,
      'rack.errors' => StringIO.new,
      'rack.multithread' => false,
      'rack.multiprocess' => true,
      'rack.run_once' => false
    }
    site = Stitch::Site.new site_root
    paths = ['/']
    until paths.empty?
      env['PATH_INFO'] = paths.shift.to_s
      (paths.concat site.page_for(env['PATH_INFO']).children.map &:path) rescue nil
      status, headers, body = site.call env.dup
      #p [status, headers, body.map.join]; print 'enter to continue'; gets # DEBUG
      output_path = site.root + env['PATH_INFO'].sub(/^\//,'') + output_filename
      if output_path.exist?
        if skip_existing
          puts "\"#{output_path}\" already exists, so it is being skipped."
          next
        end
        unless overwrite
          print "\"#{output_path}\" already exists. Should it be overwritten? (y/N) "
          unless gets =~ /^y/i
            puts "Skipped \"#{output_path}\"."
            next 
          end
        end
      end
      if status.between? 200, 299
        print "Generating \"#{output_path}\" ... "
        output_path.open('w') {|f| body.each {|s| f.write s}}
        puts "done."
      else
        puts "\"#{url_scheme}://#{server_name}:#{server_port}#{env['PATH_INFO']}\"" \
             " isn't a valid page, so it's being skipped."
      end
    end
  end
end

Stitch::StaticGenerator.run!
