#!/usr/bin/env ruby
# encoding: UTF-8

require 'rubygems'
require 'silkweave'
require 'optparse'

module Silkweave::StaticGenerator
  class << self
    attr_accessor :site_root, :template_dir, :pagetype_dir, :output_filename,
      :overwrite, :server_name, :server_port, :url_scheme
  end

  # Defaults for options
  self.site_root = Dir.pwd
  self.template_dir = nil
  self.pagetype_dir = nil
  self.output_filename = 'index.html'
  self.overwrite = 'ask'
  self.server_name = 'localhost'
  self.server_port = '80'
  self.url_scheme = 'http'

  def self.run!
    OptionParser.new do |opts|
      opts.on('-r', '--root DIRECTORY',
              "Use DIRECTORY as the site's root.",
              '(default: the current directory)') do |dir|
        self.site_root = Pathname.new(Dir.pwd) + dir
      end
      opts.on('-t', '--templates DIRECTORY',
              "Look in DIRECTORY for the site's templates.",
              '(default: the directory named "templates" in the parent of the site root)') do |dir|
        self.template_dir = Pathname.new(Dir.pwd) + dir
      end
      opts.on('-T', '--page-types DIRECTORY',
              "Look in DIRECTORY for custom page types.",
              '(default: the directory named "page-types" in the parent of the site root)') do |dir|
        self.pagetype_dir = Pathname.new(Dir.pwd) + dir
      end
      opts.on('-o', '--output FILENAME',
              "Write each generated page to the file named FILENAME in the page's directory.",
              '(default: "index.html")') do |fname|
        self.output_filename = fname
      end
      opts.on('-O', '--overwrite BEHAVIOR', ['yes', 'no', 'ask'],
              "Choose whether to overwrite files that already exist.",
              'BEHAVIOR must be either "yes", "no", or "ask". (default: "ask")') do |choice|
        self.overwrite = choice.downcase
      end
      opts.on('-s', '--server HOSTNAME',
              "Use HOSTNAME as the domain name of the site. (default: localhost)") do |hostname|
        self.server_name = hostname
      end
      opts.on('-p', '--port PORT', 
              "Use PORT as the TCP port number used to access the site. (default: 80)") do |port|
        self.server_port = port
      end
      opts.on('-u', '--url-scheme SCHEME', 
              'Use SCHEME as the protocol component of URLs used to access the site.',
              '(default: "http")') do |scheme|
        self.url_scheme = scheme
      end
    end.parse!

    env = { # initialize the rack environment
      'REQUEST_METHOD' => 'GET',
      'SCRIPT_NAME' => '',
      'QUERY_STRING' => '',
      'SERVER_NAME' => server_name,
      'SERVER_PORT' => server_port,
      'rack.version' => [1,1],
      'rack.url_scheme' => url_scheme,
      'rack.input' => StringIO.new,
      'rack.errors' => StringIO.new,
      'rack.multithread' => false,
      'rack.multiprocess' => true,
      'rack.run_once' => false
    }
    site = Silkweave::Site.new site_root, template_dir, pagetype_dir
    paths = ['/'] # A stack of URL paths to request.
    until paths.empty?
      # Pop a URL path from the top of the stack.
      env['PATH_INFO'] = paths.shift.to_s
      # Push the children of this URL's page onto the stack.
      paths.concat site.page_for(env['PATH_INFO']).children.map(&:path).to_a rescue nil

      output_path = site.root + env['PATH_INFO'].sub(/^\//,'') + output_filename
      if output_path.exist?
        case overwrite
        when 'yes'
          puts "\"#{output_path}\" already exists, but will be overwritten."
        when 'no'
          puts "\"#{output_path}\" already exists, so it will not be overwritten."
          next
        else
          unless overwrite === 'ask'
            puts "Warning: #{overwrite} is not a valid argument for --overwrite."
            self.overwrite = 'ask'
          end
          print "\"#{output_path}\" already exists. Should it be overwritten? (y/N) "
          unless gets =~ /^y/i
            puts "\"#{output_path}\" will not be overwritten."
            next 
          else
            puts "\"#{output_path}\" will be overwritten."
          end
        end
      end

      # Get the rendered page for the current URL path.
      status, headers, body = site.call env.dup
      #p [status, headers, body.map.join]; print 'enter to continue'; gets # DEBUG
      if status.between? 200, 299
        print "Generating \"#{output_path}\" ... "
        begin
          output_path.open('w') {|f| body.each {|s| f.write s}}
          puts "done."
        rescue
          puts "Error: #{$!}"
        end
      else
        puts "\"#{url_scheme}://#{server_name}:#{server_port}#{env['PATH_INFO']}\"" \
             " isn't a valid page, so it's being skipped."
      end
    end
  end
end

Silkweave::StaticGenerator.run! rescue puts "Error: #{$!}"
