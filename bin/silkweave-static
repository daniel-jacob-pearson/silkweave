#!/usr/bin/env ruby
# encoding: UTF-8

require 'rubygems'
require 'silkweave'
require 'optparse'
require 'facets/hash/slice'

module Silkweave::StaticGenerator
  def self.run!
    # Defaults for options
    options = {
      :site_root => Dir.pwd,
      :template_dir => nil,
      :pagetype_dir => nil,
      :type_map_file => nil,
      :output_filename => 'index.html',
      :overwrite => 'ask',
      :server_name => 'localhost',
      :server_port => '80',
      :url_scheme => 'http'
    }

    OptionParser.new do |opts|
      opts.on('-r', '--root DIRECTORY',
              "Use DIRECTORY as the site's root.",
              '(default: the current directory)') do |dir|
        options[:site_root] = Pathname.pwd + dir
      end
      opts.on('-t', '--templates DIRECTORY',
              "Look in DIRECTORY for the site's templates.",
              '(default: the directory named "templates" in the parent of the site root)') do |dir|
        options[:template_dir] = Pathname.pwd + dir
      end
      opts.on('-T', '--page-types DIRECTORY',
              "Look in DIRECTORY for custom page types.",
              '(default: the directory named "page-types" in the parent of the site root)') do |dir|
        options[:pagetype_dir] = Pathname.pwd + dir
      end
      opts.on('-m', '--type-map FILENAME',
              "Use FILENAME as the file that specifies the types for pages on the site.",
              '(default: the file named "type-map.yaml" in the parent of the site root)') do |fname|
        options[:type_map_file] = Pathname.pwd + fname
      end
      opts.on('-o', '--output FILENAME',
              "Write each generated page to the file named FILENAME in the page's directory.",
              '(default: "index.html")') do |fname|
        options[:output_filename] = fname
      end
      opts.on('-O', '--overwrite BEHAVIOR', ['yes', 'no', 'ask'],
              "Choose whether to overwrite files that already exist.",
              'BEHAVIOR must be either "yes", "no", or "ask". (default: "ask")') do |choice|
        options[:overwrite] = choice.downcase
      end
      opts.on('-s', '--server HOSTNAME',
              "Use HOSTNAME as the domain name of the site. (default: localhost)") do |hostname|
        options[:server_name] = hostname
      end
      opts.on('-p', '--port PORT', 
              "Use PORT as the TCP port number used to access the site. (default: 80)") do |port|
        options[:server_port] = port
      end
      opts.on('-u', '--url-scheme SCHEME', 
              'Use SCHEME as the protocol component of URLs used to access the site.',
              '(default: "http")') do |scheme|
        options[:url_scheme] = scheme
      end
    end.parse!

    env = { # initialize the rack environment
      'REQUEST_METHOD' => 'GET',
      'SCRIPT_NAME' => '',
      'QUERY_STRING' => '',
      'SERVER_NAME' => options[:server_name],
      'SERVER_PORT' => options[:server_port],
      'rack.version' => [1,1],
      'rack.url_scheme' => options[:url_scheme],
      'rack.input' => StringIO.new,
      'rack.errors' => StringIO.new,
      'rack.multithread' => false,
      'rack.multiprocess' => true,
      'rack.run_once' => false
    }
    site = Silkweave::Site.new options[:site_root],
      Haml::Util.to_hash(options.slice(:template_dir, :pagetype_dir, :type_map_file).select {|k,v| !v.nil?})
    paths = ['/'] # A stack of URL paths to request.
    until paths.empty?
      # Pop a URL path from the top of the stack.
      env['PATH_INFO'] = paths.shift.to_s
      # Push the children of this URL's page onto the stack.
      paths.concat site.page_for(env['PATH_INFO']).children.map(&:path).to_a rescue nil

      output_path = site.root + env['PATH_INFO'].sub(/^\//,'') + options[:output_filename]
      if output_path.exist?
        case options[:overwrite]
        when 'yes'
          puts "\"#{output_path}\" already exists, but will be overwritten."
        when 'no'
          puts "\"#{output_path}\" already exists, so it will not be overwritten."
          next
        else
          unless options[:overwrite] === 'ask'
            puts "Warning: #{options[:overwrite]} is not a valid argument for --overwrite."
            options[:overwrite] = 'ask'
          end
          print "\"#{output_path}\" already exists. Should it be overwritten? (y/N) "
          unless gets =~ /^y/i
            puts "\"#{output_path}\" will not be overwritten."
            next 
          else
            puts "\"#{output_path}\" will be overwritten."
          end
        end
      end

      # Get the rendered page for the current URL path.
      status, headers, body = site.call env.dup
      #p [status, headers, body.map.join]; print 'enter to continue'; gets # DEBUG
      if status.between? 200, 299
        print "Generating \"#{output_path}\" ... "
        begin
          output_path.open('w') {|f| body.each {|s| f.write s}}
          puts "done."
        rescue
          puts "Error: #{$!}"
        end
      else
        puts "\"#{options[:url_scheme]}://#{options[:server_name]}:#{options[:server_port]}#{env['PATH_INFO']}\"" \
             " isn't a valid page, so it's being skipped."
      end
    end
  end
end

Silkweave::StaticGenerator.run! rescue puts "Error: #{$!}"
